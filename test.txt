// // index routes
// app.get("/listings",wrapAsync( async (req, res) => {
//   const allListing = await Listing.find({});
//   res.render("listings/index.ejs", { allListing });
// }));

// // create new listing
// app.get("/listings/new", (req, res) => {
//   res.render("listings/new");
// });
// // show routes
// app.get("/listings/:id",wrapAsync( async (req, res) => {
//   let { id } = req.params;
//   const listing = await Listing.findById(id).populate("reviews");
//   res.render("listings/show.ejs", { listing });
// }));
// // create route
// app.post("/listings",validatelisting,wrapAsync (async (req, res,next) => {
//     let newListing = new Listing(req.body.listing);
//     await newListing.save();
//     res.redirect("/listings");
// }));
// // edit route
// app.get("/listings/:id/edit",wrapAsync( async (req,res)=>{
//   let {id} = req.params;
//   const listing = await Listing.findById(id)
//   res.render("listings/edit",{listing})
// }))
// // update route
// app.put("/listings/:id",validatelisting,wrapAsync( async(req,res)=>{
//   let {id} = req.params
//   await Listing.findByIdAndUpdate(id,{...req.body.listing})
//   res.redirect(`/listings/${id}`)
// }))
// // delete route
// app.delete("/listings/:id",wrapAsync( async (req,res)=>{
//   let {id} = req.params;
//   await Listing.findByIdAndDelete(id)
//   res.redirect("/listings")
// }))

// // review route
// app.post("/listings/:id/reviews", wrapAsync(async function(req,res,next){

//   let listing = await Listing.findById(req.params.id)
//   let newrev = new Review(req.body.review)
//   listing.reviews.push(newrev);
//   await newrev.save()
//   await listing.save()
//   res.redirect(`/listings/${listing._id}`)
// }))

// // delete review 
// app.post("/listings/:id/reviews/:reviewId",wrapAsync( async(req,res)=>{
//   let {id,reviewId} = req.params;
//   await Listing.findByIdAndUpdate(id,{$pull:{reviews:reviewId}})
//   await Review.findByIdAndDelete(reviewId)
//   res.redirect(`/listings/${id}`)
// }))




// const validatelisting = (req,res,next)=>{
//   let {error} = listingSchema.validate(req.body)
//   if(error){
//     throw new ExpressError(400,error)
//   }
//   else{
//     next()
//   }
// }

// const validateReview = (req,res,next)=>{
//   let {error} = reviewSchema.validate(req.body)
//   if(error){
//     throw new ExpressError(400,error)
//   }
//   else{
//     next()
//   }
// }